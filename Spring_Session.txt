In a web application, user session management is crucial for managing user state. Spring Session is an implementation of four approaches, storing session data in a persistent data store. Spring Session supports multiple datastores, like RDBMS, Redis, HazelCast, MongoDB, etc., to save the user session data.


Spring Session Benefits

Spring Session decouples the session management logic from the application, making it more tolerant.
Spring Session keeps information in the database, so it’s great to use in a clustered environment with multiple server nodes. Because of this, we don’t need to rely on the sticky session or session replication logic.
As session data is stored in the database, user session data is not lost if the application crashes. When the application started again, it picks up the user session from the database.
It is easy to switch between session storage. Just by changing the configuration, we can switch from using JDBC to Redis.


Spring Session consists of the following modules:
Spring Session Core - provides core Spring Session functionalities and APIs
Spring Session Data Redis - provides SessionRepository and ReactiveSessionRepository implementation backed by Redis and configuration support
Spring Session JDBC - provides SessionRepository implementation backed by a relational database and configuration support
Spring Session Hazelcast - provides SessionRepository implementation backed by Hazelcast and configuration support




Dependencies for Spring Session JDBC

        <dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session-jdbc</artifactId>
		</dependency>

spring.session.store-type=jdbc
spring.session.jdbc.initialize-schema=always
spring.session.timeout=900


Dependencies for Spring Session for Redis


     <dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session-data-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		
spring.session.store-type=redis
spring.redis.host=localhost
spring.redis.port=6379		